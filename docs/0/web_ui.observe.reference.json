{"dependencies":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///home/luiz/programs/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"},{"comment":"\nThis library is used to implement [Observable] types.\n\nIt exposes lower level functionality such as [hasObservers], [observeReads]\n[notifyChange] and [notifyRead].\n\nUnless you are mixing in [Observable], it is usually better to write:\n\n    import 'package:web_ui/observe.dart';\n","uri":"file:///home/luiz/work/moving_castles/packages/web_ui/observe/observable.dart","name":"file:///home/luiz/work/moving_castles/packages/web_ui/observe/observable.dart","id":"web_ui.observe.observable","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn observable object. This is used by data in model-view architectures\nto notify interested parties of changes.\n\nMost of the methods for observation are static methods to keep them\nstratified from the objects being observed. This is a similar to the design\nof Mirrors.\n","name":"Observable","id":"Observable","children":[{"comment":"Observers for this object. Uses a linked-list for fast removal. ","name":"$_observers","id":"$_observers","line":"274","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"web_ui.observe.observable/ChangeRecord","name":"ChangeRecord"}],"name":"List"},"comment":"Changes to this object since last batch was delivered. ","name":"$_changes","id":"$_changes","line":"277","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"hashCode","id":"hashCode","line":"279","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"$_nextHashCode","id":"$_nextHashCode","line":"283","kind":"variable"}],"line":"268","kind":"class"}],"line":"15","kind":"library"}],"uri":"file:///home/luiz/work/moving_castles/packages/web_ui/observe/reference.dart","name":"file:///home/luiz/work/moving_castles/packages/web_ui/observe/reference.dart","id":"web_ui.observe.reference","children":[{"superclass":{"refId":"web_ui.observe.observable/Observable","name":"Observable"},"comment":"\nAn observable reference to an value. Use this if you want to store a single\nvalue. NOTE: it is generally better to use the `@observable` annotation on\nyour observable class. This class is provided for demonstration purposes, or\nif you happen to need a single unnamed observable reference.\n","name":"ObservableReference","id":"ObservableReference","children":[{"returnType":{"refId":"void","name":"void"},"isSetter":true,"name":"value=","id":"value=1()","children":[{"ref":{"refId":"web_ui.observe.reference/ObservableReference/T","name":"T"},"name":"newValue","id":"newValue","kind":"param"}],"line":"25","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"32","kind":"method"},{"ref":{"refId":"web_ui.observe.reference/ObservableReference/T","name":"T"},"name":"value","id":"value","line":"20","kind":"property"},{"ref":{"refId":"web_ui.observe.reference/ObservableReference/T","name":"T"},"name":"_value","isPrivate":true,"id":"_value","line":"16","kind":"variable"},{"name":"ObservableReference","id":"ObservableReference1()","children":[{"ref":{"refId":"web_ui.observe.reference/ObservableReference/T","name":"T"},"isOptional":true,"name":"initialValue","id":"initialValue","kind":"param"}],"line":"18","kind":"constructor"},{"name":"T","id":"T","kind":"typeparam"}],"line":"15","kind":"class"}],"line":"5","kind":"library"}