{"dependencies":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///home/luiz/programs/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"uri":"file:///home/luiz/programs/dart-sdk/lib/core/errors.dart","name":"Error","id":"Error","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","name":"safeToString","id":"safeToString1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"16","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"isStatic":true,"name":"_objectToString","isPrivate":true,"id":"_objectToString1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"object","id":"object","kind":"param"}],"line":"34","kind":"method"},{"name":"Error","id":"Error0()","line":"8","kind":"constructor"}],"line":"7","kind":"class"}],"line":"5","kind":"library"}],"comment":"Common utility functions used by code generated by the dwc compiler. ","uri":"package:web_ui/templating.dart","name":"package:web_ui/templating.dart","id":"templating","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"_isSafeUri","isPrivate":true,"id":"_isSafeUri1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"uri","id":"uri","kind":"param"}],"line":"203","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nEnsure that [usiString] is a safe URI. Otherwise, return a '#' URL.\n\nThe logic in this method was based on the GWT implementation located at:\nhttp://code.google.com/p/google-web-toolkit/source/browse/trunk/user/src/com/google/gwt/safehtml/shared/UriUtils.java\n","name":"sanitizeUri","id":"sanitizeUri1()","children":[{"name":"uri","id":"uri","kind":"param"}],"line":"195","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nChanges the style properties from [oldValue] to [newValue]. A runtime error\nis reported if [newValue] is not a `Map<String, String>`.\n","name":"updateStyle","id":"updateStyle3()","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"name":"elem","id":"elem","kind":"param"},{"name":"oldValue","id":"oldValue","kind":"param"},{"name":"newValue","id":"newValue","kind":"param"}],"line":"172","kind":"method"},{"returnType":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"comment":"Bind the result of [exp] to the style attribute in [elem]. ","name":"bindStyle","id":"bindStyle2()","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"name":"elem","id":"elem","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"exp","id":"exp","children":[{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"163","kind":"method"},{"returnType":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"comment":"\nBind the result of [exp] to the class attribute in [elem]. [exp] is a closure\nthat can return a string, a list of strings, an string with spaces, or null.\n\nYou can bind a single class attribute by binding a getter to the property\ndefining your class.  For example,\n\n    var class1 = 'pretty';\n    bindCssClasses(e, () => class1);\n\nIn this example, if you update class1 to null or an empty string, the\nprevious value ('pretty') is removed from the element.\n\nYou can bind multiple class attributes in several ways: by returning a list\nof values in [exp], by returning in [exp] a string with multiple classes\nseparated by spaces, or by calling this function several times. For example,\nsuppose you want to bind 2 classes on an element,\n\n    var class1 = 'pretty';\n    var class2 = 'selected';\n\nand you want to independently change class1 and class2. For instance, If you\nset `class1` to null, you'd like `pretty` will be removed from `e.classes`,\nbut `selected` to be kept.  The tree alternatives mentioned earlier look as\nfollows:\n\n  * binding classes with a list:\n\n        bindCssClasses(e, () => [class1, class2]);\n\n  * binding classes with a string:\n\n        bindCssClasses(e, () => \"${class1 != null ? class1 : ''} \"\n                                \"${class2 != null ? class2 : ''}\");\n\n  * binding classes separately:\n\n        bindCssClasses(e, () => class1);\n        bindCssClasses(e, () => class2);\n","name":"bindCssClasses","id":"bindCssClasses2()","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"name":"elem","id":"elem","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"exp","id":"exp","children":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"151","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nUpdates the CSS classes based on the [changes] that were made to an\n[ObservableList].\n","name":"changeCssClasses","id":"changeCssClasses2()","children":[{"name":"elem","id":"elem","kind":"param"},{"ref":{"refId":"web_ui.observe.observable/ChangeRecord","name":"ChangeRecord"},"name":"change","id":"change","kind":"param"}],"line":"106","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds CSS [classes] if [addClasses] is true, otherwise removes them.\nThis is useful to keep one or more CSS classes in sync with a boolean\nproperty.\n\nThe classes parameter can be either a [String] or [List<String>].\nIf it is a single string, it may contain spaces and several class names.\nIf it is a list of strings, null and empty strings are ignored.\nAny other type except null will throw an [ArgumentError].\n\nFor example:\n\n    updateCssClass(node, item.isDone, 'item-checked item-completed');\n\nIt can also be used with a watcher:\n\n    watch(() => item.isDone, (e) {\n      updateCssClass(node, e.newValue, 'item-checked item-completed');\n    });\n\nIf the set of classes is changing dynamically, it is better to use\n[bindCssClasses].\n","name":"updateCssClass","id":"updateCssClass3()","children":[{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"name":"elem","id":"elem","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"addClasses","id":"addClasses","kind":"param"},{"name":"classes","id":"classes","kind":"param"}],"line":"71","kind":"method"},{"returnType":{"refId":"dart.dom.html/Node","name":"Node"},"comment":"\nUpdates a data-bound [node] to a new [value]. If the new value is not\n[SafeHtml] and the node is a [Text] node, then we update the node in place.\nOtherwise, the node is replaced in the DOM tree and the new node is returned.\n[stringValue] should be equivalent to `value.toString()` and can be passed\nhere if it has already been computed.\n","name":"updateBinding","id":"updateBinding3()","children":[{"name":"value","id":"value","kind":"param"},{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"node","id":"node","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"stringValue","id":"stringValue","kind":"param"}],"line":"32","kind":"method"},{"returnType":{"refId":"dart.dom.html/Node","name":"Node"},"comment":"\nTake the value of a bound expression and creates an HTML node with its value.\nNormally bindings are associated with text nodes, unless [binding] has the\n[SafeHtml] type, in which case an html element is created for it.\n","name":"nodeForBinding","id":"nodeForBinding1()","children":[{"name":"binding","id":"binding","kind":"param"}],"line":"22","kind":"method"},{"name":"_SAFE_SCHEMES","isPrivate":true,"id":"_SAFE_SCHEMES","line":"201","kind":"variable"},{"superclass":{"refId":"templating/Template","name":"Template"},"comment":"\nA template loop of the form `<td template iterate=\"x in list\">`. Unlike\n[LoopTemplate], here we insert children directly then node annotated with the\ntemplate attribute.\n","name":"LoopTemplateInAttribute","id":"LoopTemplateInAttribute","children":[{"returnType":{"refId":"void","name":"void"},"name":"create","id":"create0()","line":"655","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"657","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"_removeInternal","isPrivate":true,"id":"_removeInternal0()","line":"670","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"676","kind":"method"},{"ref":{"refId":"templating/LoopIterationSetup","name":"LoopIterationSetup"},"isFinal":true,"name":"iterSetup","id":"iterSetup","line":"648","kind":"variable"},{"isFinal":true,"name":"exp","id":"exp","line":"649","kind":"variable"},{"ref":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"name":"stopper","id":"stopper","line":"650","kind":"variable"},{"name":"LoopTemplateInAttribute","id":"LoopTemplateInAttribute3()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"node","id":"node","kind":"param"},{"initializedField":{"refId":"templating/LoopTemplateInAttribute/exp","name":"exp"},"name":"exp","id":"exp","kind":"param"},{"initializedField":{"refId":"templating/LoopTemplateInAttribute/iterSetup","name":"iterSetup"},"ref":{"refId":"templating/LoopIterationSetup","name":"LoopIterationSetup"},"name":"iterSetup","id":"iterSetup","kind":"param"}],"line":"652","kind":"constructor"}],"line":"647","kind":"class"},{"superclass":{"refId":"templating/PlaceholderTemplate","name":"PlaceholderTemplate"},"comment":"\nA template loop of the form `<template iterate=\"x in list \">` or\n`<td template repeat=\"x in list\">`.\n","name":"LoopTemplate","id":"LoopTemplate","children":[{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"624","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"635","kind":"method"},{"ref":{"refId":"templating/LoopIterationSetup","name":"LoopIterationSetup"},"isFinal":true,"name":"iterSetup","id":"iterSetup","line":"620","kind":"variable"},{"name":"LoopTemplate","id":"LoopTemplate3()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"reference","id":"reference","kind":"param"},{"name":"exp","id":"exp","kind":"param"},{"initializedField":{"refId":"templating/LoopTemplate/iterSetup","name":"iterSetup"},"ref":{"refId":"templating/LoopIterationSetup","name":"LoopIterationSetup"},"name":"iterSetup","id":"iterSetup","kind":"param"}],"line":"622","kind":"constructor"}],"line":"619","kind":"class"},{"returnType":{"refId":"void","name":"void"},"comment":"Function to set up the contents of a loop template. ","name":"LoopIterationSetup","id":"LoopIterationSetup","children":[{"ref":{"refId":"dart.core/List","name":"List"},"name":"list","id":"list","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"},{"ref":{"refId":"templating/Template","name":"Template"},"name":"template","id":"template","kind":"param"}],"line":"613","kind":"typedef"},{"superclass":{"refId":"templating/PlaceholderTemplate","name":"PlaceholderTemplate"},"comment":"\nA template conditional like `<template instantiate=\"if test\">` or\n`<td template instantiate=\"if test\">`.\n","name":"ConditionalTemplate","id":"ConditionalTemplate","children":[{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"591","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"605","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isVisible","id":"isVisible","line":"585","kind":"variable"},{"ref":{"refId":"templating/ConditionalBodySetup","name":"ConditionalBodySetup"},"isFinal":true,"name":"bodySetup","id":"bodySetup","line":"586","kind":"variable"},{"name":"ConditionalTemplate","id":"ConditionalTemplate3()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"reference","id":"reference","kind":"param"},{"name":"exp","id":"exp","kind":"param"},{"initializedField":{"refId":"templating/ConditionalTemplate/bodySetup","name":"bodySetup"},"ref":{"refId":"templating/ConditionalBodySetup","name":"ConditionalBodySetup"},"name":"bodySetup","id":"bodySetup","kind":"param"}],"line":"588","kind":"constructor"}],"line":"584","kind":"class"},{"returnType":{"refId":"void","name":"void"},"comment":"Function to set up the contents of a conditional template. ","name":"ConditionalBodySetup","id":"ConditionalBodySetup","children":[{"ref":{"refId":"templating/ConditionalTemplate","name":"ConditionalTemplate"},"name":"template","id":"template","kind":"param"}],"line":"578","kind":"typedef"},{"isAbstract":true,"superclass":{"refId":"templating/Template","name":"Template"},"comment":"\nA template to represent conditionals and loops of the form:\n\n    <template instantiate=\"if test\">\n    <template iterate=\"x in list\">\n    <td template instantiate=\"if test\">\n\nFor a template element, we leave the (childless) template element in the\ntree and use it as a reference point for child insertion. This matches\nnative MDV behavior.\n\nFor a template attribute, we leave the (childless) element in the tree as\na marker, hidden with 'display:none', and use it as a reference point for\ninsertion.\n","name":"PlaceholderTemplate","id":"PlaceholderTemplate","children":[{"returnType":{"refId":"void","name":"void"},"name":"create","id":"create0()","line":"554","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"556","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"568","kind":"method"},{"isFinal":true,"comment":"Expression watch by this template (condition or loop expression). ","name":"exp","id":"exp","line":"546","kind":"variable"},{"ref":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"name":"stopper","id":"stopper","line":"548","kind":"variable"},{"name":"PlaceholderTemplate","id":"PlaceholderTemplate2()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"reference","id":"reference","kind":"param"},{"initializedField":{"refId":"templating/PlaceholderTemplate/exp","name":"exp"},"name":"exp","id":"exp","kind":"param"}],"line":"550","kind":"constructor"}],"line":"544","kind":"class"},{"superclass":{"refId":"templating/TemplateItem","name":"TemplateItem"},"comment":"A template, which can contain template items and DOM nodes. ","name":"Template","id":"Template","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Associate the event listener while this template is visible.  ","name":"listen","id":"listen2()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.dom.html/Event","name":"Event"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"},{"ref":{"refId":"dart.dom.html/EventListener","name":"EventListener"},"name":"listener","id":"listener","kind":"param"}],"line":"420","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Run [action] when [exp] changes (while this template is visible).  ","name":"bind","id":"bind3()","children":[{"name":"exp","id":"exp","kind":"param"},{"ref":{"refId":"web_ui.observe.observable/ChangeObserver","name":"ChangeObserver"},"name":"action","id":"action","kind":"param"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isFinal","id":"isFinal","kind":"param"}],"line":"425","kind":"method"},{"returnType":{"refId":"dart.dom.html/Node","name":"Node"},"comment":"Create and bind a [Node] to [exp] while this template is visible. ","name":"contentBind","id":"contentBind2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"exp","id":"exp","kind":"param"},{"name":"isFinal","id":"isFinal","kind":"param"}],"line":"430","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Bind [exp] to `elem.class` while this template is visible.  ","name":"bindClass","id":"bindClass3()","children":[{"name":"elem","id":"elem","kind":"param"},{"name":"exp","id":"exp","kind":"param"},{"name":"isFinal","id":"isFinal","kind":"param"}],"line":"439","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Bind [exp] to `elem.style` while this template is visible.  ","name":"bindStyle","id":"bindStyle3()","children":[{"name":"elem","id":"elem","kind":"param"},{"name":"exp","id":"exp","kind":"param"},{"name":"isFinal","id":"isFinal","kind":"param"}],"line":"444","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Bind [exp] to [setter] while this template is visible.  ","name":"oneWayBind","id":"oneWayBind4()","children":[{"name":"exp","id":"exp","kind":"param"},{"name":"setter","id":"setter","kind":"param"},{"name":"isFinal","id":"isFinal","kind":"param"},{"isOptional":true,"defaultValue":"false","name":"isUrl","id":"isUrl","kind":"param"}],"line":"449","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Watch [exp] and render a conditional while this template is visible. ","name":"conditional","id":"conditional3()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"template","id":"template","kind":"param"},{"name":"exp","id":"exp","kind":"param"},{"name":"bodySetup","id":"bodySetup","kind":"param"}],"line":"454","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nWatch [exp] and render a loop while this template is visible.\nThis is used by all \"iterate\" and \"repeat\" attributes, except those that\nrequire [loopIterateAttr].\n","name":"loop","id":"loop3()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"template","id":"template","kind":"param"},{"name":"exp","id":"exp","kind":"param"},{"name":"iterSetup","id":"iterSetup","kind":"param"}],"line":"463","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nWatch [exp] and render a loop while this template is visible.\nThis is used by:\n    <td template iterate=\"x in list\">\n","name":"loopIterateAttr","id":"loopIterateAttr3()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"template","id":"template","kind":"param"},{"name":"exp","id":"exp","kind":"param"},{"name":"iterSetup","id":"iterSetup","kind":"param"}],"line":"472","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Bind the lifecycle of the component with this template's lifecycle. ","name":"component","id":"component1()","children":[{"ref":{"refId":"web_ui/WebComponent","name":"WebComponent"},"name":"component","id":"component","kind":"param"}],"line":"477","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Ensure [n] is inserted in the tree when this template gets inserted. ","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"n","id":"n","kind":"param"}],"line":"487","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Inserts every node in [list] when this template gets inserted. ","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.dom.html/Node","name":"Node"}],"name":"List"},"name":"list","id":"list","kind":"param"}],"line":"490","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Create this template and its children (templates are [TemplateItem]s). ","name":"create","id":"create0()","line":"493","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Insert this template and its children. ","name":"insert","id":"insert0()","line":"500","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Remove this template and its children. ","name":"remove","id":"remove0()","line":"507","kind":"method"},{"ref":{"refId":"dart.dom.html/Node","name":"Node"},"isFinal":true,"comment":"Root of the template. ","name":"node","id":"node","line":"408","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"templating/TemplateItem","name":"TemplateItem"}],"name":"List"},"isFinal":true,"comment":"Children template items. ","name":"children","id":"children","line":"411","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.dom.html/Node","name":"Node"}],"name":"List"},"isFinal":true,"comment":"Nodes that this template will insert/remove programatically. ","name":"nodes","id":"nodes","line":"415","kind":"variable"},{"name":"Template","id":"Template1()","children":[{"initializedField":{"refId":"templating/Template/node","name":"node"},"ref":{"refId":"dart.dom.html/Node","name":"Node"},"name":"node","id":"node","kind":"param"}],"line":"417","kind":"constructor"}],"line":"406","kind":"class"},{"superclass":{"refId":"templating/TemplateItem","name":"TemplateItem"},"comment":"Represents a component added within a template. ","name":"ComponentItem","id":"ComponentItem","children":[{"returnType":{"refId":"void","name":"void"},"name":"create","id":"create0()","line":"392","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"396","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"400","kind":"method"},{"isFinal":true,"comment":"An autogenerated component. ","name":"component","id":"component","line":"388","kind":"variable"},{"name":"ComponentItem","id":"ComponentItem1()","children":[{"initializedField":{"refId":"templating/ComponentItem/component","name":"component"},"name":"component","id":"component","kind":"param"}],"line":"390","kind":"constructor"}],"line":"386","kind":"class"},{"superclass":{"refId":"templating/TemplateItem","name":"TemplateItem"},"comment":"\nRepresents a one-way binding between a dart getter expression and a DOM\nproperty, or conversely between a DOM property value and a dart property.\n","name":"DomPropertyBinding","id":"DomPropertyBinding","children":[{"returnType":{"refId":"void","name":"void"},"name":"_safeSetter","isPrivate":true,"id":"_safeSetter1()","children":[{"name":"value","id":"value","kind":"param"}],"line":"362","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"366","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"377","kind":"method"},{"ref":{"refId":"watcher/Setter","name":"Setter"},"isFinal":true,"comment":"Value updated by this binding. ","name":"setter","id":"setter","line":"342","kind":"variable"},{"ref":{"refId":"watcher/Getter","name":"Getter"},"isFinal":true,"comment":"\nGetter that reads the value of the binding, either from a Dart expression\nor from a DOM property (which is internally also a Dart expression).\n","name":"getter","id":"getter","line":"348","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"comment":"\nWhether this is a binding that assigns a DOM attribute accepting URL\nvalues. If so, the value assigned to the attribute needs to be sanitized.\n","name":"isUrl","id":"isUrl","line":"354","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"isFinal","id":"isFinal","line":"356","kind":"variable"},{"ref":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"name":"stopper","id":"stopper","line":"358","kind":"variable"},{"name":"DomPropertyBinding","id":"DomPropertyBinding4()","children":[{"initializedField":{"refId":"templating/DomPropertyBinding/getter","name":"getter"},"ref":{"refId":"watcher/Getter","name":"Getter"},"name":"getter","id":"getter","kind":"param"},{"initializedField":{"refId":"templating/DomPropertyBinding/setter","name":"setter"},"ref":{"refId":"watcher/Setter","name":"Setter"},"name":"setter","id":"setter","kind":"param"},{"initializedField":{"refId":"templating/DomPropertyBinding/isUrl","name":"isUrl"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isUrl","id":"isUrl","kind":"param"},{"initializedField":{"refId":"templating/DomPropertyBinding/isFinal","name":"isFinal"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isFinal","id":"isFinal","kind":"param"}],"line":"360","kind":"constructor"}],"line":"340","kind":"class"},{"superclass":{"refId":"templating/TemplateItem","name":"TemplateItem"},"comment":"Represents a binding to a class attribute. ","name":"ClassAttrBinding","id":"ClassAttrBinding","children":[{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"318","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"328","kind":"method"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"isFinal":true,"name":"elem","id":"elem","line":"311","kind":"variable"},{"isFinal":true,"name":"exp","id":"exp","line":"312","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"isFinal","id":"isFinal","line":"313","kind":"variable"},{"ref":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"name":"stopper","id":"stopper","line":"314","kind":"variable"},{"name":"ClassAttrBinding","id":"ClassAttrBinding3()","children":[{"initializedField":{"refId":"templating/ClassAttrBinding/elem","name":"elem"},"ref":{"refId":"dart.dom.html/Element","name":"Element"},"name":"elem","id":"elem","kind":"param"},{"initializedField":{"refId":"templating/ClassAttrBinding/exp","name":"exp"},"name":"exp","id":"exp","kind":"param"},{"initializedField":{"refId":"templating/ClassAttrBinding/isFinal","name":"isFinal"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isFinal","id":"isFinal","kind":"param"}],"line":"316","kind":"constructor"}],"line":"310","kind":"class"},{"superclass":{"refId":"templating/TemplateItem","name":"TemplateItem"},"comment":"Represents a binding to a style attribute. ","name":"StyleAttrBinding","id":"StyleAttrBinding","children":[{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"291","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"301","kind":"method"},{"isFinal":true,"name":"exp","id":"exp","line":"284","kind":"variable"},{"ref":{"refId":"dart.dom.html/Element","name":"Element"},"isFinal":true,"name":"elem","id":"elem","line":"285","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"isFinal","id":"isFinal","line":"286","kind":"variable"},{"ref":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"name":"stopper","id":"stopper","line":"287","kind":"variable"},{"name":"StyleAttrBinding","id":"StyleAttrBinding3()","children":[{"initializedField":{"refId":"templating/StyleAttrBinding/elem","name":"elem"},"ref":{"refId":"dart.dom.html/Element","name":"Element"},"name":"elem","id":"elem","kind":"param"},{"initializedField":{"refId":"templating/StyleAttrBinding/exp","name":"exp"},"name":"exp","id":"exp","kind":"param"},{"initializedField":{"refId":"templating/StyleAttrBinding/isFinal","name":"isFinal"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isFinal","id":"isFinal","kind":"param"}],"line":"289","kind":"constructor"}],"line":"283","kind":"class"},{"superclass":{"refId":"templating/TemplateItem","name":"TemplateItem"},"comment":"Represents a generic data binding and a corresponding action. ","name":"Binding","id":"Binding","children":[{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"264","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"274","kind":"method"},{"isFinal":true,"name":"exp","id":"exp","line":"257","kind":"variable"},{"ref":{"refId":"web_ui.observe.observable/ChangeObserver","name":"ChangeObserver"},"isFinal":true,"name":"action","id":"action","line":"258","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"isFinal":true,"name":"isFinal","id":"isFinal","line":"259","kind":"variable"},{"ref":{"refId":"web_ui.observe.observable/ChangeUnobserver","name":"ChangeUnobserver"},"name":"stopper","id":"stopper","line":"260","kind":"variable"},{"name":"Binding","id":"Binding3()","children":[{"initializedField":{"refId":"templating/Binding/exp","name":"exp"},"name":"exp","id":"exp","kind":"param"},{"initializedField":{"refId":"templating/Binding/action","name":"action"},"ref":{"refId":"web_ui.observe.observable/ChangeObserver","name":"ChangeObserver"},"name":"action","id":"action","kind":"param"},{"initializedField":{"refId":"templating/Binding/isFinal","name":"isFinal"},"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isFinal","id":"isFinal","kind":"param"}],"line":"262","kind":"constructor"}],"line":"256","kind":"class"},{"superclass":{"refId":"templating/TemplateItem","name":"TemplateItem"},"comment":"Represents an event listener within a template. ","name":"Listener","id":"Listener","children":[{"returnType":{"refId":"void","name":"void"},"name":"insert","id":"insert0()","line":"245","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"remove","id":"remove0()","line":"249","kind":"method"},{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.dom.html/Event","name":"Event"}],"name":"Stream"},"isFinal":true,"name":"eventStream","id":"eventStream","line":"239","kind":"variable"},{"ref":{"refId":"dart.async/StreamSubscription","arguments":[{"refId":"dart.dom.html/Event","name":"Event"}],"name":"StreamSubscription"},"name":"_subscription","isPrivate":true,"id":"_subscription","line":"240","kind":"variable"},{"ref":{"refId":"dart.dom.html/EventListener","name":"EventListener"},"isFinal":true,"name":"listener","id":"listener","line":"241","kind":"variable"},{"name":"Listener","id":"Listener2()","children":[{"initializedField":{"refId":"templating/Listener/eventStream","name":"eventStream"},"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.dom.html/Event","name":"Event"}],"name":"Stream"},"name":"eventStream","id":"eventStream","kind":"param"},{"initializedField":{"refId":"templating/Listener/listener","name":"listener"},"ref":{"refId":"dart.dom.html/EventListener","name":"EventListener"},"name":"listener","id":"listener","kind":"param"}],"line":"243","kind":"constructor"}],"line":"238","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn item that is part of a template and hence will have the same lifetime as\nother elements in the template.\n","name":"TemplateItem","id":"TemplateItem","children":[{"returnType":{"refId":"void","name":"void"},"comment":"Invoked when the template contents are created. ","name":"create","id":"create0()","line":"228","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Invoked when the template contents are inserted to the document. ","name":"insert","id":"insert0()","line":"231","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Invoked when the template is removed (undoes created and inserted). ","name":"remove","id":"remove0()","line":"234","kind":"method"}],"line":"226","kind":"class"},{"interfaces":[{"refId":"dart.core/Error","name":"Error"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"An error thrown when data bindings are set up with incorrect data. ","name":"DataBindingError","id":"DataBindingError","children":[{"name":"toString","id":"toString0()","line":"219","kind":"method"},{"isFinal":true,"name":"message","id":"message","line":"217","kind":"variable"},{"name":"DataBindingError","id":"DataBindingError1()","children":[{"initializedField":{"refId":"templating/DataBindingError/message","name":"message"},"name":"message","id":"message","kind":"param"}],"line":"218","kind":"constructor"}],"line":"216","kind":"class"}],"line":"6","kind":"library"}