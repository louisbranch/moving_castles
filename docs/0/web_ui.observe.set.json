{"dependencies":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"isAbstract":true,"superclass":{"refId":"dart.collection/IterableBase","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"IterableBase"},"comment":"\nThis class is the public interface of a set. A set is a collection\nwithout duplicates.\n","uri":"file:///home/luiz/programs/dart-sdk/lib/core/set.dart","name":"Set","id":"Set","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if [value] is in the set.\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"22","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] into the set. The method has no effect if\n[value] was already in the set.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"28","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds all of [elements] to this Set.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"36","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"dart.core/Object","name":"Object"},"name":"value","id":"value","kind":"param"}],"line":"43","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all of [elements] from this set.\n","name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"48","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that are not\nin [elements].\n","name":"retainAll","id":"retainAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"elements","id":"elements","kind":"param"}],"line":"54","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that satisfy [test].\n","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/set.dart","name":"element","id":"element","line":"59","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"59","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements of this set that fail to satisfy [test].\n","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Set/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/set.dart","name":"element","id":"element","line":"64","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"64","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if this Set contains all the elements of [other].\n","name":"containsAll","id":"containsAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"69","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set which is the intersection between this set and [other].\n","name":"intersection","id":"intersection1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set which contains all the elements of this set and [other].\n","name":"union","id":"union1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"comment":"\nReturns a new set with the the elements of this that are not in [other].\n","name":"difference","id":"difference1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements in the set.\n","name":"clear","id":"clear0()","line":"89","kind":"method"},{"name":"Set","id":"Set0()","line":"12","kind":"constructor"},{"comment":"\nCreates a [Set] that contains all elements of [other].\n","name":"Set.from","id":"Set.from1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Set/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"}],"line":"17","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"11","kind":"class"},{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///home/luiz/programs/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterator.dart","name":"Iterator","id":"Iterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","name":"moveNext","id":"moveNext0()","line":"35","kind":"method"},{"ref":{"refId":"dart.core/Iterator/E","name":"E"},"comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","name":"current","id":"current","line":"44","kind":"property"},{"name":"E","id":"E","kind":"typeparam"}],"line":"27","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"Iterable","id":"Iterable","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nReturns a lazy [Iterable] where each element [:e:] of [this] is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"51","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"51","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [f].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"63","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"63","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"74","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"74","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nCheck whether the collection contains an element equal to [element].\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"79","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nApplies the function [f] to each element of this collection.\n","name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"84","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"95","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"95","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"95","kind":"method"},{"comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"previousValue","id":"previousValue","line":"111","kind":"param"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"111","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"111","kind":"param"}],"line":"110","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n","name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"117","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"117","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"defaultValue":"\"\"","name":"separator","id":"separator","kind":"param"}],"line":"126","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n","name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"element","id":"element","line":"136","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"136","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"List"},"comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements will be in iteration order. The list is fixed-length\nif [growable] is false.\n","name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Set"},"comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","name":"toSet","id":"toSet0()","line":"149","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if [this]\ncontains fewer than [n] elements.\n","name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"170","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of [this].\nWhen the iterator encounters an element [:e:] that does not satisfy [test],\nit discards [:e:] and moves into the finished state. That is, it will not\nask or provide any more elements.\n","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"181","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"181","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf [this] has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"189","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterable"},"comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will iterate over all elements of [this].\nAs long as the iterator's elements do not satisfy [test] they are\ndiscarded. Once an element satisfies the [test] the iterator stops testing\nand uses every element unconditionally.\n","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"200","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"200","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"231","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"231","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is [:null:], a [StateError] is\nthrown.\n","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"240","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"240","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element that satisfies [f]. If no or more than one\nelement match then a [StateError] is thrown.\n","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"value","id":"value","line":"246","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"246","kind":"method"},{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the [index]th element.\n\nIf [this] [Iterable] has fewer than [index] elements throws a\n[RangeError].\n\nNote: if [this] does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in [this].\n","name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"258","kind":"method"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"dart.core/Iterable/E","name":"E"}],"name":"Iterator"},"comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","name":"iterator","id":"iterator","line":"39","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","name":"length","id":"length","line":"157","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if there is no element in this collection.\n","name":"isEmpty","id":"isEmpty","line":"162","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","name":"first","id":"first","line":"208","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","name":"last","id":"last","line":"215","kind":"property"},{"ref":{"refId":"dart.core/Iterable/E","name":"E"},"comment":"\nReturns the single element in [this].\n\nIf [this] is empty or has more than one element throws a [StateError].\n","name":"single","id":"single","line":"222","kind":"property"},{"name":"Iterable","id":"Iterable0()","line":"20","kind":"constructor"},{"comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","name":"Iterable.generate","id":"Iterable.generate2()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"count","id":"count","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"generator","id":"generator","children":[{"returnType":{"refId":"dart.core/Iterable/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.core/int","name":"int"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/iterable.dart","name":"index","id":"index","line":"32","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"32","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"19","kind":"class"}],"line":"5","kind":"library"},{"uri":"package:web_ui/src/utils_observe.dart","name":"package:web_ui/src/utils_observe.dart","id":"web_ui.src.utils_observe","children":[{"isAbstract":true,"superclass":{"refId":"dart.collection/IterableBase","arguments":[],"name":"IterableBase"},"name":"IterableWorkaround","id":"IterableWorkaround","line":"69","kind":"class"}],"line":"5","kind":"library"},{"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/collection.dart","name":"dart:collection","id":"dart.collection","children":[{"isAbstract":true,"interfaces":[{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"IterableBase","id":"IterableBase","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"map","id":"map1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"205","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"205","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"where","id":"where1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"207","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"207","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"expand","id":"expand1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/Iterable","name":"Iterable"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"209","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"209","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"contains","id":"contains1()","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"element","id":"element","kind":"param"}],"line":"212","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"forEach","id":"forEach1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"void","name":"void"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"219","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"219","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"reduce","id":"reduce1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"223","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"223","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"223","kind":"method"},{"name":"fold","id":"fold2()","children":[{"name":"initialValue","id":"initialValue","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"combine","id":"combine","children":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"previousValue","id":"previousValue","line":"236","kind":"param"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"236","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"236","kind":"param"}],"line":"235","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"every","id":"every1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"242","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"242","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"join","id":"join1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"separator","id":"separator","kind":"param"}],"line":"249","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"any","id":"any1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"f","id":"f","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"element","id":"element","line":"267","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"267","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"List"},"name":"toList","id":"toList1()","children":[{"isNamed":true,"ref":{"refId":"dart.core/bool","name":"bool"},"isOptional":true,"defaultValue":"true","name":"growable","id":"growable","kind":"param"}],"line":"274","kind":"method"},{"returnType":{"refId":"dart.core/Set","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Set"},"name":"toSet","id":"toSet0()","line":"277","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"take","id":"take1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"290","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"294","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"294","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"skip","id":"skip1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"n","id":"n","kind":"param"}],"line":"298","kind":"method"},{"returnType":{"refId":"dart.core/Iterable","arguments":[{"refId":"dart.collection/IterableBase/E","name":"E"}],"name":"Iterable"},"name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"302","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"302","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"334","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"334","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"343","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"orElse","id":"orElse","children":[{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","line":"13","kind":"functiontype"}],"kind":"param"}],"line":"343","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"uri":"file:///home/luiz/programs/dart-sdk/lib/collection/iterable.dart","name":"value","id":"value","line":"358","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"358","kind":"method"},{"returnType":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"elementAt","id":"elementAt1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"index","id":"index","kind":"param"}],"line":"375","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"279","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"288","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"first","id":"first","line":"306","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"last","id":"last","line":"314","kind":"property"},{"ref":{"refId":"dart.collection/IterableBase/E","name":"E"},"name":"single","id":"single","line":"326","kind":"property"},{"name":"IterableBase","id":"IterableBase0()","line":"203","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"200","kind":"class"}],"line":"5","kind":"library"},{"comment":"\nThis library is used to implement [Observable] types.\n\nIt exposes lower level functionality such as [hasObservers], [observeReads]\n[notifyChange] and [notifyRead].\n\nUnless you are mixing in [Observable], it is usually better to write:\n\n    import 'package:web_ui/observe.dart';\n","uri":"package:web_ui/observe/observable.dart","name":"package:web_ui/observe/observable.dart","id":"web_ui.observe.observable","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nAn observable object. This is used by data in model-view architectures\nto notify interested parties of changes.\n\nMost of the methods for observation are static methods to keep them\nstratified from the objects being observed. This is a similar to the design\nof Mirrors.\n","name":"Observable","id":"Observable","children":[{"comment":"Observers for this object. Uses a linked-list for fast removal. ","name":"$_observers","id":"$_observers","line":"274","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"web_ui.observe.observable/ChangeRecord","name":"ChangeRecord"}],"name":"List"},"comment":"Changes to this object since last batch was delivered. ","name":"$_changes","id":"$_changes","line":"277","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"name":"hashCode","id":"hashCode","line":"279","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"$_nextHashCode","id":"$_nextHashCode","line":"283","kind":"variable"}],"line":"268","kind":"class"}],"line":"15","kind":"library"}],"uri":"package:web_ui/observe/set.dart","name":"package:web_ui/observe/set.dart","id":"web_ui.observe.set","children":[{"interfaces":[{"refId":"dart.core/Iterator","arguments":[{"refId":"web_ui.observe.set/_ObservableSetIterator/E","name":"E"}],"name":"Iterator"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"name":"_ObservableSetIterator","isPrivate":true,"id":"_ObservableSetIterator","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"name":"moveNext","id":"moveNext0()","line":"178","kind":"method"},{"ref":{"refId":"web_ui.observe.set/_ObservableSetIterator/E","name":"E"},"name":"current","id":"current","line":"184","kind":"property"},{"ref":{"refId":"web_ui.observe.set/ObservableSet","arguments":[{"refId":"web_ui.observe.set/_ObservableSetIterator/E","name":"E"}],"name":"ObservableSet"},"isFinal":true,"name":"_set","isPrivate":true,"id":"_set","line":"171","kind":"variable"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"web_ui.observe.set/_ObservableSetIterator/E","name":"E"}],"name":"Iterator"},"isFinal":true,"name":"_iterator","isPrivate":true,"id":"_iterator","line":"172","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_hasNext","isPrivate":true,"id":"_hasNext","line":"173","kind":"variable"},{"name":"_ObservableSetIterator","id":"_ObservableSetIterator1()","children":[{"ref":{"refId":"web_ui.observe.set/ObservableSet","arguments":[{"refId":"web_ui.observe.set/_ObservableSetIterator/E","name":"E"}],"name":"ObservableSet"},"name":"set","id":"set","kind":"param"}],"line":"175","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"170","kind":"class"},{"interfaces":[{"refId":"dart.core/Set","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Set"}],"superclass":{"refId":"web_ui.observe.set/IterableWorkaround_Observable","name":"IterableWorkaround_Observable"},"comment":"\nRepresents an observable set of model values. If any items are added,\nremoved, or replaced, then observers that are registered with\n[observe] will be notified.\n","name":"ObservableSet","id":"ObservableSet","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nReturns true if [value] is in the set.\n","name":"contains","id":"contains1()","children":[{"ref":{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"47","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds [value] into the set. The method has no effect if\n[value] was already in the set.\n","name":"add","id":"add1()","children":[{"ref":{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"56","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","name":"remove","id":"remove1()","children":[{"ref":{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"},"name":"value","id":"value","kind":"param"}],"line":"70","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all elements in the set.\n","name":"clear","id":"clear0()","line":"89","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAdds all the elements of the given collection to the set.\n","name":"addAll","id":"addAll1()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Iterable"},"name":"collection","id":"collection","kind":"param"}],"line":"111","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nRemoves all the elements of the given collection from the set.\n","name":"removeAll","id":"removeAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"collection","id":"collection","kind":"param"}],"line":"116","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainAll","id":"retainAll1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"collection","id":"collection","kind":"param"}],"line":"118","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"},"uri":"package:web_ui/observe/set.dart","name":"element","id":"element","line":"120","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"void","name":"void"},"name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"uri":"file:///home/luiz/programs/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"},"uri":"package:web_ui/observe/set.dart","name":"element","id":"element","line":"123","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"123","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns true if [other] contains all the elements of this set. ","name":"isSubsetOf","id":"isSubsetOf1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"127","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns true if this set contains all the elements of [other]. ","name":"containsAll","id":"containsAll1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"131","kind":"method"},{"returnType":{"refId":"web_ui.observe.set/ObservableSet","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"ObservableSet"},"comment":"Returns a new set which is the intersection of this set and [other]. ","name":"intersection","id":"intersection1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"134","kind":"method"},{"returnType":{"refId":"web_ui.observe.set/ObservableSet","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"ObservableSet"},"comment":"Returns a new set with the elements of both this are [other]. ","name":"union","id":"union1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"144","kind":"method"},{"returnType":{"refId":"web_ui.observe.set/ObservableSet","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"ObservableSet"},"comment":"Returns a new set with the elements of this that are not in [other]. ","name":"difference","id":"difference1()","children":[{"ref":{"refId":"dart.core/Set","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Set"},"name":"other","id":"other","kind":"param"}],"line":"151","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"160","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","line":"99","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"isEmpty","id":"isEmpty","line":"104","kind":"property"},{"ref":{"refId":"dart.core/Iterator","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Iterator"},"name":"iterator","id":"iterator","line":"106","kind":"property"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"},{"refId":"dart.core/Object","name":"Object"}],"name":"Map"},"isFinal":true,"name":"_map","isPrivate":true,"id":"_map","line":"23","kind":"variable"},{"ref":{"refId":"web_ui.observe.map/MapFactory","name":"MapFactory"},"isFinal":true,"name":"_createMap","isPrivate":true,"id":"_createMap","line":"25","kind":"variable"},{"comment":"\nCreates an observable set, optionally using the provided [createMap]\nfactory to construct a custom map type.\n","name":"ObservableSet","id":"ObservableSet1()","children":[{"isNamed":true,"ref":{"refId":"web_ui.observe.map/MapFactory","name":"MapFactory"},"isOptional":true,"name":"createMap","id":"createMap","kind":"param"}],"line":"31","kind":"constructor"},{"comment":"\nCreates an observable set that contains all elements of [other].\n","name":"ObservableSet.from","id":"ObservableSet.from2()","children":[{"ref":{"refId":"dart.core/Iterable","arguments":[{"refId":"web_ui.observe.set/ObservableSet/E","name":"E"}],"name":"Iterable"},"name":"other","id":"other","kind":"param"},{"isNamed":true,"ref":{"refId":"web_ui.observe.map/MapFactory","name":"MapFactory"},"isOptional":true,"name":"createMap","id":"createMap","line":"39","kind":"param"}],"line":"38","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"}],"line":"20","kind":"class"}],"line":"5","kind":"library"}